Operadores Aritmeticos

Ingresar a la consola interactiva > python3

División
    > 21/5 (4.2)

División entera
    > 21//5 (4)

División modulo (Lo que queda)
    > 21%5 (1)

Potencia 
    > 2**5

Raíz cuadrada
    > 81**0.5 (9.0)
    > import math
    > math.sqrt(81) (9.0)

Datos Primitivos
    Integer: números enteros
    Floats: numeros de punto flotante (decimales)
    Strings: cadena de caracteres
    Boolean: booleaos (True, False)

Saber el tipo de dato que estoy usando
    > x=5
    > type(x) (<class 'int'>)

Convertir Strings a Integer
    > x=int(x)

Convertir decimal a texto
    > str(4.5) ('4.5')

Operadores lógicos
    and
    or
    not

Métodos para trabajar con textos

    variable.strip(): El método strip eliminará todos los caracteres vacíos que pueda contener la variable

    variable.lower(): El método lower convertirá a las letras en minúsculas.

    variable.upper(): El método upper convertirá a las letras en mayúsculas.

    variable.capitalize(): El método capitalize convertirá a la primera letra de la cadena de caracteres en mayúscula.

    variable.replace (‘o’, ‘a’): El método replace remplazará un caracterer por otro. En este caso remplazará todas las ‘o’ por el caracter ‘a’.

    len(variable): Te indica la longitud de la cadena de texto dentro de la variable en ese momento.
    variable[1: 3: 2]/variable[::]/variable[] (Slice)

Listas (Python necesita más meoria para mantenerlas vivas)
    variable = []
    Agregar -> variable.append(1)
    Borrar -> variable.pop(1)

Tuplas (Son objetos estaticos)
    mi_tupla = ()

ZEN de Python - The Zen of Python, by Tim Peters
    ¿Cómo accederlo? 
        > python3 
        > import this
    Bello es mejor que feo
    Explícito es mejor que implícito
    Simple es mejor que complejo
    Complejo es mejor que complicado
    Plano es mejor que anidado
    Espaciado es mejor que denso
    La legibilidad es importante
    Los casos especiales no son lo suficientemente especiales cpmo para romper las reglas (sin embargo, la practicidad le gana a la pureza)
    Los errores nunca deberían pasar silenciosamente (a menos que se silencien explícitamente)
    Frente a la ambiguedad, evitar la tentación de adivinar
    Debería haber una, y preferiblemente sola, una manera obvia de hacerlo. (A pesar de que esa manera no sea obvia a menos que seas holandés)
    Ahora es mejor que nunca
    A pesar de que nunca es muchas veces mejor que ahora mismo
    Si la implementación es díficil de explicar, es una mala idea, y si es fácil de explicar, es una buena idea
    Los espacios de nombres son una gran idea, ¡Tengamos más de esos! (namespaces)







